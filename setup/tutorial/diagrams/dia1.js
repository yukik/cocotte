console.log('require ' + __filename);

var helper = require('cocotte/diagram/helper');

/*
 * ダイアグラムを定義すると、diagramモジュールによって
 * ビルトインが作成されメモリに常駐します
 * ダイアグラムを利用するにはビルトインからインスタンスを作成します
 *
 * ダイアグラムは複数のデータソースを管理することができ、それらを連携させるとこが出来ます
 * MVCアーキテクチャーではモデル(M)の役割の連携部分のみを定義されていると位置づけられます
 *
 * ダイアグラムのデータソースはデータソースビルトイン名をkeyにスキーマオブジェクトの代わりにtrueを設定する事ができます
 * そのように設定されたデータソースは、ダイアグラム間でデータソースの共有が可能になります。
 * それ以外の方法では、データソースは一つのダイアグラムに帰属する無名データソースとなり、共有はできません。
 * 無名データソースは、全く同じスキーマがダイアグラム間で共有される事はありません
 * 
 */
var diagram = {
	datasources: {
		group: true
	  , user : true
	  , role : true
	}
  , relations: []
};

/*
 * リレーション
 * 	リレーションを設定すると現在行の値の変更や行移動に連動する事が出来ます
 * 例
 * 	所属の現在行が移動された場合にユーザーを所属しているユーザーだけ表示するように設定します
 * 	また、ユーザーの所属名の既定値を変更します
 * 	diagram.relations.push('group.name = user.group');
 *
 * 上記の構文と例での構文は同じ設定を示します 
 * 上記の方が直感で理解しやすいですが、細かな制御はできませんので
 * 制御が必要になった場合は例の方法で記述してください
 * 上記ではリレーション名は自動的に設定されるため、リレーション越しの計算式を
 * 行う必要がある場合はまずはリレーション名を調査する必要があります 
 */
diagram.relations.push({
    name      : 'r1'    // リレーション名
  , from      : 'group' // 行を監視するデータソース
  , to        : 'user'  // 連動するデータソース
  , on        : [['name', '=', 'group']] // 結合条件 fromField, symbol, toField の配列を設定します
  , setDefault: true    // 既定値を変更します from valueをto valueの既定値に設定します
  , setFilter : true    // フィルター値を変更します
  , request   : true    // 所属の現在行が変更されたときにユーザーのリストを取得し直します
  , delay     : 500     // 現在行が変更されてからrequestを行うまでの時間(ms)を示します
  , remain    : false   // 監視データソース全行と結合する行を残す(true)。既定値(false)では現在行のみ残す
  , remove    : false   // 監視行を削除した場合は、連動するデータソースの行も削除する
});

helper.test(diagram);

module.exports = exports = diagram;